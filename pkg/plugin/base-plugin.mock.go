// Code generated by MockGen. DO NOT EDIT.
// Source: base-plugin.go
//
// Generated by this command:
//
//	mockgen -source=base-plugin.go -package=plugin -destination=base-plugin.mock.go
//

// Package plugin is a generated GoMock package.
package plugin

import (
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBasePlugin is a mock of BasePlugin interface.
type MockBasePlugin struct {
	ctrl     *gomock.Controller
	recorder *MockBasePluginMockRecorder
}

// MockBasePluginMockRecorder is the mock recorder for MockBasePlugin.
type MockBasePluginMockRecorder struct {
	mock *MockBasePlugin
}

// NewMockBasePlugin creates a new mock instance.
func NewMockBasePlugin(ctrl *gomock.Controller) *MockBasePlugin {
	mock := &MockBasePlugin{ctrl: ctrl}
	mock.recorder = &MockBasePluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBasePlugin) EXPECT() *MockBasePluginMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockBasePlugin) Exec(overrideEnv map[string]string, stdIn io.Reader, stdOut, stdErr io.Writer, args []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", overrideEnv, stdIn, stdOut, stdErr, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockBasePluginMockRecorder) Exec(overrideEnv, stdIn, stdOut, stdErr, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockBasePlugin)(nil).Exec), overrideEnv, stdIn, stdOut, stdErr, args)
}

// GetSDKDir mocks base method.
func (m *MockBasePlugin) GetSDKDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSDKDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSDKDir indicates an expected call of GetSDKDir.
func (mr *MockBasePluginMockRecorder) GetSDKDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSDKDir", reflect.TypeOf((*MockBasePlugin)(nil).GetSDKDir))
}

// GetSDKVersionDir mocks base method.
func (m *MockBasePlugin) GetSDKVersionDir(pluginName, version string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSDKVersionDir", pluginName, version)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSDKVersionDir indicates an expected call of GetSDKVersionDir.
func (mr *MockBasePluginMockRecorder) GetSDKVersionDir(pluginName, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSDKVersionDir", reflect.TypeOf((*MockBasePlugin)(nil).GetSDKVersionDir), pluginName, version)
}

// HasInstalled mocks base method.
func (m *MockBasePlugin) HasInstalled(pluginName, version string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasInstalled", pluginName, version)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasInstalled indicates an expected call of HasInstalled.
func (mr *MockBasePluginMockRecorder) HasInstalled(pluginName, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasInstalled", reflect.TypeOf((*MockBasePlugin)(nil).HasInstalled), pluginName, version)
}

// WithSDKDir mocks base method.
func (m *MockBasePlugin) WithSDKDir(dir string) BasePlugin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithSDKDir", dir)
	ret0, _ := ret[0].(BasePlugin)
	return ret0
}

// WithSDKDir indicates an expected call of WithSDKDir.
func (mr *MockBasePluginMockRecorder) WithSDKDir(dir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithSDKDir", reflect.TypeOf((*MockBasePlugin)(nil).WithSDKDir), dir)
}
