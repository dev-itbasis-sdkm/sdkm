// Code generated by MockGen. DO NOT EDIT.
// Source: sdk-versions-cache.go
//
// Generated by this command:
//
//	mockgen -source=sdk-versions-cache.go -package=plugin -destination=sdk-versions-cache.mock.go
//

// Package plugin is a generated GoMock package.
package plugin

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSDKVersionsCache is a mock of SDKVersionsCache interface.
type MockSDKVersionsCache struct {
	ctrl     *gomock.Controller
	recorder *MockSDKVersionsCacheMockRecorder
}

// MockSDKVersionsCacheMockRecorder is the mock recorder for MockSDKVersionsCache.
type MockSDKVersionsCacheMockRecorder struct {
	mock *MockSDKVersionsCache
}

// NewMockSDKVersionsCache creates a new mock instance.
func NewMockSDKVersionsCache(ctrl *gomock.Controller) *MockSDKVersionsCache {
	mock := &MockSDKVersionsCache{ctrl: ctrl}
	mock.recorder = &MockSDKVersionsCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSDKVersionsCache) EXPECT() *MockSDKVersionsCacheMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockSDKVersionsCache) Load(ctx context.Context, versionType VersionType) []SDKVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", ctx, versionType)
	ret0, _ := ret[0].([]SDKVersion)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockSDKVersionsCacheMockRecorder) Load(ctx, versionType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockSDKVersionsCache)(nil).Load), ctx, versionType)
}

// Store mocks base method.
func (m *MockSDKVersionsCache) Store(ctx context.Context, versionType VersionType, sdkVersions []SDKVersion) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Store", ctx, versionType, sdkVersions)
}

// Store indicates an expected call of Store.
func (mr *MockSDKVersionsCacheMockRecorder) Store(ctx, versionType, sdkVersions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockSDKVersionsCache)(nil).Store), ctx, versionType, sdkVersions)
}

// WithFile mocks base method.
func (m *MockSDKVersionsCache) WithFile(filePath string) SDKVersionsCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithFile", filePath)
	ret0, _ := ret[0].(SDKVersionsCache)
	return ret0
}

// WithFile indicates an expected call of WithFile.
func (mr *MockSDKVersionsCacheMockRecorder) WithFile(filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithFile", reflect.TypeOf((*MockSDKVersionsCache)(nil).WithFile), filePath)
}
